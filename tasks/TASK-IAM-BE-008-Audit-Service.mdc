id: "TASK-IAM-BE-008-Audit-Service"
title: "FEAT(service): Journal d'audit IAM (succès uniquement)"
status: "planned"
priority: "P0"
labels: ["[backend]", "[audit]", "[service]", "[tests]"]
dependencies: ["TASK-IAM-BE-001-DB-Schema"]
created: "2025-10-01"
---

### 1. High-Level Objective
Créer un service d'audit centralisé pour émettre les événements autorisés listés dans `.docs/annex/epic-1-iam/events.md` (succès uniquement) avec `{orgId, actorId, type, targetId, metadata, createdAt}`.

### 2. Background / Context (Optionnel mais recommandé)
PRD US-7 et `events.md` : `user.team_member.invited`, `user.team_member.activated`, `user.role.changed`, `user.status.changed`.

### 3. Assumptions & Constraints
-   **ASSUMPTION:** Prisma pour persistance, injection NestJS.
-   **CONSTRAINT:** Émission limitée aux événements du dictionnaire `events.md`.

### 4. Dependencies (Autres Tâches ou Artefacts)
-   **Tasks:** `TASK-IAM-BE-001-DB-Schema`
-   **Files:** `apps/backend/src/services/**`, `.docs/annex/epic-1-iam/events.md`

### 5. Context Plan
-   **BEGIN (add to model context):**
    - `.docs/annex/epic-1-iam/events.md` (read-only)
    - `apps/backend/src/services/**`
-   **END STATE (must exist after completion):**
    - `apps/backend/src/services/audit/audit.service.ts`
    - `apps/backend/src/services/audit/audit.types.ts` (type union appuyé par `events.md`)
    - tests unit: `apps/backend/test/audit.service.spec.ts`

### 6. Low-Level Steps (Ordonnés et denses en information)
1.  Définir type `AuditEventType` à partir du dictionnaire `events.md`.
2.  Implémenter `AuditService.emit(eventType, orgId, actorId, targetId?, metadata?)`.
3.  Persister via Prisma `AuditEvent`.
4.  Tester: seules les valeurs autorisées passent; pas d'écriture sur erreurs.

### 7. Acceptance Criteria
-   [ ] `AuditService` expose `emit` typé sur `events.md` et testé.
-   [ ] Les APIs consomment le service pour tous événements IAM succès.
