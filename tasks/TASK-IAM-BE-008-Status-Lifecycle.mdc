# Template de Tâche Atomique (Version "Keystone")

## Méta-données (OBLIGATOIRE)
---
task_type: 'development'
migration_name: ''
---

id: "TASK-IAM-BE-008-Status-Lifecycle"
title: "Construire l'API désactivation/réactivation memberships"
status: "planned"
priority: "P0"
labels: ["backend", "types", "tests"]
dependencies: ["TASK-IAM-BE-001-DB-Schema", "TASK-IAM-BE-002-Auth-Guard", "TASK-IAM-BE-003-Tenant-Enforcement", "TASK-IAM-BE-004-Audit-Service"]
created: "2025-10-17"
---
### 1. High-Level Objective
Permettre aux Admins de désactiver/réactiver un membre avec les effets requis : invalidation de sessions, contraintes sur transferts clients, audit `user.status.changed`, rôle "Temporaire" après réactivation.

### 2. Background / Context (Optionnel mais recommandé)
US-5 du PRD impose un soft-delete (`status = Disabled`) conservant les données 14 jours, transferts clients obligatoires pour CSM/Closer et rôle Temporaire lors de la réactivation.

### 3. Assumptions & Constraints
- **ASSUMPTION:** Le transfert des clients peut être orchestré via des services existants (placeholders si besoin).
- **CONSTRAINT:** Désactivation doit invalider les sessions immédiatement et bloquer les actions clientes dépendantes.

### 4. Dependencies (Autres Tâches ou Artefacts)
- **Tasks:** `TASK-IAM-BE-001-DB-Schema`, `TASK-IAM-BE-002-Auth-Guard`, `TASK-IAM-BE-003-Tenant-Enforcement`, `TASK-IAM-BE-004-Audit-Service`
- **Files:** `alpha-v1-context/5_PRD_Features_Alpha_v1/PRD_Features_Alpha_v1_IAM_Socle.md`, `annex/epic-1-iam/events.md`

### 5. Context Plan
- **BEGIN (add to model context):**
    - `apps/backend/src/memberships/memberships.controller.ts`
    - `apps/backend/src/memberships/memberships.service.ts`
    - `apps/backend/src/audit/audit.service.ts`
    - `apps/backend/src/clerk/clerk.service.ts`
    - `apps/backend/test/status.e2e-spec.ts`
- **END STATE (must exist after completion):**
    - `apps/backend/src/memberships/memberships.controller.ts`
    - `apps/backend/src/memberships/memberships.service.ts`
    - `apps/backend/test/status.e2e-spec.ts`

### 6. Low-Level Steps (Ordonnés et denses en information)
1. **IMPLEMENT** `PATCH /memberships/:id/status` acceptant `Disabled` ou `Active`.
2. **HANDLE** désactivation : check CSM (clients actifs) & Closer (transfert onboarding) avant commit.
3. **SET** `status`, `disabledAt`, et `role = Temporaire` lors réactivation; forcer Admin à reconfigurer le rôle via réponse.
4. **INVALIDATE** sessions via Clerk et consigner les audit logs.
5. **TEST** e2e couvrant désactivation simple, blocage CSM sans réassignation, réactivation -> rôle Temporaire.

### 7. Acceptance Criteria
- [ ] Désactivation invalide sessions et enregistre `user.status.changed {from: Active, to: Disabled}`.
- [ ] Réactivation force rôle Temporaire et exige réassignation manuelle.
- [ ] Blocage si CSM a clients actifs ou si Closer a onboarding en cours.
- [ ] Tests e2e couvrent succès + conditions bloquantes.

### **8. Sécurité et Conformité Qualité**
- [ ] **Validation des Entrées :** Vérifier que le statut demandé est dans l'enum `UserStatus`.
- [ ] **Gestion des Secrets :** Appels Clerk sécurisés via env vars.
- [ ] **Performance :** Utiliser transactions Prisma pour cohérence et éviter N+1 lors vérifications.