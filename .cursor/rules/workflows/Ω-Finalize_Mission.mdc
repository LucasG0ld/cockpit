# Micro-Workflow Ω : Finalisation de Mission

**Objectif :** Ce protocole guide les toutes dernières étapes d'une mission. Ton but est de fusionner le travail, de mettre à jour le statut de la tâche, et de nettoyer l'environnement.

---

### **Phase 1 : Assimilation des Procédures de Finalisation**

**Instruction :** Lis et assimile intégralement le contenu des fichiers de fonctions suivants.
*   `.cursor/rules/functions/run_controlled_merge.mdc`
*   `.cursor/rules/functions/run_update_task_status.mdc`
*   `.cursor/rules/functions/run_post_merge_cleanup.mdc`

Une fois ces trois procédures parfaitement assimilées, passe à la phase d'exécution.

---

### **Phase 2 : Exécution Séquentielle de la Mission**

1.  **Validation du Contexte Doctrinal (Approche Opportuniste) :**
    *   Au début de cette phase, confirme que les neuf doctrines fondamentales sont toujours présentes dans ton contexte de travail récent.
    *   **Si oui,** tu peux continuer.
    *   **Si non (parce que la conversation a été longue ou a dévié),** tu dois d'abord relire le fichier `.cursor/rules/functions/inject_doctrines_fondamentales.mdc` avant de procéder à l'étape suivante.

2.  **Exécution de la Fusion Contrôlée :**
    *   Ayant reçu l'instruction **"Le travail est validé. Procède à la fusion dans main."**, exécute la procédure `run_controlled_merge`.
    *   **Contexte Requis :** Le `[nom-de-la-branche]` à fusionner est celui de la branche sur laquelle tu as effectué le travail. **Cette information est fournie par l'opérateur au début de cette étape.**
    *   **Garde-fou Critique :** La procédure `run_controlled_merge` contient des opérations Git à haut risque. Si elle échoue, elle doit s'arrêter et te fournir un rapport d'incident. Dans ce cas, présente ce rapport à l'opérateur et attends ses instructions pour la résolution.

3.  **Mise à Jour du Statut de la Tâche (Nouvelle Étape Critique)**
    *   Une fois que la procédure `run_controlled_merge` s'est terminée avec **succès**, exécute la procédure `run_update_task_status`.
    *   **Contexte Requis :**
        *   Le `task_file_path` est le chemin vers le fichier de tâche original de la mission. **Cette information doit être fournie par l'opérateur au début de cette étape.**
        *   Le `new_status` est `"completed"`.
    *   **Garde-fou :** Si cette procédure échoue, **STOPPE** et signale l'erreur à l'opérateur. Ne procède pas au nettoyage tant que le statut n'est pas mis à jour.

4.  **Exécution du Nettoyage Post-Fusion :**
    *   Une fois que la fusion et la mise à jour du statut ont réussi, exécute la procédure `run_post_merge_cleanup`.
    *   Suis scrupuleusement son protocole : pose la question à l'opérateur et n'agis que sur une réponse affirmative.

5.  **Rédaction du Rapport d'Exécution Final (Action Critique) :**
    *   **Contexte Requis :** Le `task_file_path` de la mission qui vient d'être terminée.
    *   **Action 1 : Localisation du Template :** Lis le contenu du template `@.cursor/rules/templates/task-report.template.mdc`.
    *   **Action 2 : Collecte des Données :** Synthétise les informations de la mission (livrables, décisions, anomalies, etc.) pour remplir chaque section du template.
    *   **Action 3 : Génération et Commit du Rapport :** Crée un nouveau fichier `reports/execution/[sous-dossier-feature]/EXECUTION_REPORT_[TASK-ID].mdc`, écris le contenu, et commite-le directement sur la branche `main`.
        *   `git add [chemin/vers/le/rapport]`
        *   `git commit -m "docs(report): add execution report for [TASK-ID]"`
        *   `git push origin main`

6.  **Fin de Mission :**
    *   Une fois le rapport d'exécution généré et poussé, la mission est officiellement et définitivement close.