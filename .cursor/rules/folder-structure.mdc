# Structure des Fichiers du Projet ClientFlow v1.0

# À L'AGENT IA : 
# Ta source de vérité principale pour le développement est le dossier de contexte de la version active (ex: `alpha-v1-context/`).
# Les règles qui régissent ton travail se trouvent dans `.cursor/rules/`.
# Ne fais JAMAIS référence aux fichiers dans le dossier `.docs/` pour l'exécution d'une tâche.

---

### Arborescence du Projet

/
├── .cursor/                        # Cerveau IA + rules
│   └── rules/
│       ├── functions/              # Unités procédurales atomiques. Briques de base de la logique.
│       │   ├── execute_security_audit_lot.mdc
│       │   ├── inject_doctrines_fondamentales.mdc
│       │   ├── request_human_review_for_merge.mdc
│       │   ├── run_context_resume.mdc
│       │   ├── run_context_save.mdc
│       │   ├── run_controlled_merge.mdc
│       │   ├── run_development_cycle.mdc
│       │   ├── run_environment_initialization.mdc
│       │   ├── run_feature_decomposition_and_planning.mdc
│       │   ├── run_mission_briefing_and_validation.mdc
│       │   ├── run_post_merge_cleanup.mdc
│       │   ├── run_prd_feature_specification.mdc
│       │   ├── run_prd_global_cocreation.mdc
│       │   ├── run_pre_flight_check.mdc
│       │   ├── run_quality_gate.mdc
│       │   ├── run_security_remediation_cycle.mdc
│       │   ├── run_simple_pre_flight_check.mdc
│       │   ├── run_strategic_plan_modification.mdc
│       │   ├── run_tech_debt_audit.mdc
│       │   └── setup_security_audit.mdc
│       │
│       ├── workflows/              # Orchestrateurs légers. Séquencent les `functions` pour exécuter les processus.
│       │   ├── A-Generate_PRD_Global.mdc
│       │   ├── B-Generate_PRD_Feature.mdc
│       │   ├── C-Generate_Technical_Plan.mdc
│       │   ├── D.2-Execute_Development_Cycle.mdc
│       │   ├── D.3-Validation_and_Hardening.mdc
│       │   ├── E-Apply_Plan_Modification.mdc
│       │   ├── F-Pause_Current_Task.mdc
│       │   ├── F-Resume_Paused_Task.mdc
│       │   ├── G-Run_Tech_Debt_Audit.mdc
│       │   ├── H.1-Plan_Security_Audit.mdc
│       │   ├── H.2-Execute_Audit_Lot.mdc
│       │   ├── α-Start_Mission.mdc
│       │   └── Ω-Finalize_Mission.mdc
│       │
│       ├── templates/              # Modèles standardisés pour la génération d'artefacts (ADR, PRD, tâches).
│       │   ├── adr.template.mdc
│       │   ├── graph.template.mdc
│       │   ├── prd-feature.template.mdc
│       │   ├── prd-global.template.mdc
│       │   └── task.template.mdc
│       │
│       ├── folder-structure.mdc    # Source de vérité pour la structure des dossiers du projet. À utiliser pour la localisation de fichiers.
│       └── conventions-naming.mdc  # Source de vérité pour les conventions de nommage. À utiliser pour valider/générer des noms.
│
├── .docs/                          # PORTAIL VERS LA DOCUMENTATION EXTERNE (POUR LES HUMAINS)
│   └── README.md                   # Ce fichier contient les liens vers la documentation stratégique sur Google Drive.
│
├── alpha-v1-context/               # LE DOSSIER DE MISSION POUR L'ALPHA V1
│   ├── 1_Context_Input_Alpha_v1.md
│   ├── 2_Plan_de_Release_Alpha_v1.md
│   ├── 3_PRD_Global_Alpha_v1.md
│   ├── 4_Epiques_Alpha_v1/
│   │   ├── Charte_Epique_1_IAM.md
│   │   └── ... (les autres chartes de l'Alpha v1)
│   └── 5_PRD_Features_Alpha_v1/
│       ├── PRD_Feature_Login.md
│       └── ...
│
├── alpha-v2-context/               # Le dossier de mission pour la v2 (créé plus tard)
│   └── ...
│
├── adr/                            # Architecture Decision Records
├── annex/                          # Annexes (roadmap, events…)
│   ├── db-schema/
│   ├── epic-1-iam/
│   │   ├── _plan.md
│   │   └── events.md
│   ├── epic-2-iam/
│   ├── epic-3-iam/
│   └── epic-4-iam/
│
├── prd/                            # Product Requirement Docs
│
├── apps/                           # Monorepo apps
│   ├── frontend/                   # Next.js + Atomic Design
│   │   ├── src/                    # Tout le code frontend
│   │   │   ├── app/                # Routes Next.js (App Router)
│   │   │   ├── components/         # Atomic Design
│   │   │   │   ├── atoms/
│   │   │   │   ├── molecules/
│   │   │   │   ├── organisms/
│   │   │   │   ├── templates/
│   │   │   │   └── pages/
│   │   │   ├── hooks/
│   │   │   ├── contexts/
│   │   │   ├── lib/
│   │   │   └── assets/             # images, icônes, fonts
│   │   ├── public/                 # Fichiers statiques
│   │   ├── next.config.js
│   │   └── tsconfig.json
│   │
│   └── backend/                    # NestJS + Prisma
│       ├── src/                    # Tout le code backend
│       │   ├── api/                # Modules / routes (controllers)
│       │   ├── services/           # Logique métier
│       │   ├── lib/                # Utils backend (logger, middlewares)
│       │   ├── jobs/               # Cron jobs / workers
│       │   └── observability/      # Logs, monitoring, sécurité
│       ├── prisma/                 # schema + migrations + seeds
│       ├── nest-cli.json           # Config NestJS
│       ├── tsconfig.json
│       └── package.json
│
├── packages/                       # Packages partagés
│   ├── ui/                         # Design system partagé (shadcn/ui customisé)
│   └── config/                     # Config ESLint, Prettier, tsconfig, Tailwind
│
├── tasks/                          # Tâches IA
│    ├── TASK-IAM-BE-001-DB-Schema.mdc
│    ├── TASK-IAM-BE-002-Auth-Guard.mdc
│    ├── TASK-IAM-BE-003-Tenant-Enforcement.mdc
│    └── ...
│
├── tests/                          # Tests unit/integration/e2e
│
├── infra/                          # Infra & Docker
│   ├── docker/
│   │   ├── frontend.Dockerfile
│   │   ├── backend.Dockerfile
│   │   └── docker-compose.yml
│   └── k8s/ (optionnel futur)
│
├── reports/
│   └── quality-gate/               # Rapports markdown quality gate (ex: TASK-XXX-quality-gate-report.md)
│
├── .github/workflows/              # CI/CD GitHub Actions
├── run_quality_gate.sh
├── .env.local
├── middleware.ts
├── next.config.js
├── package.json
├── pnpm-workspace.yaml
└── tsconf